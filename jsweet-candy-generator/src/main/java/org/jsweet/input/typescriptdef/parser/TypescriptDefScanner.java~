/* The following code was generated by JFlex 1.3.5 on 13/11/15 09:56 */


/*
 * This source code file is the exclusive property of its author. No copy or 
 * usage of the source code is permitted unless the author contractually 
 * allows it under the terms of a well-defined agreement.
 */

package org.jsweet.input.typescriptdef.parser;

import java_cup.runtime.*;
import org.jsweet.input.typescriptdef.ast.Token;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 13/11/15 09:56 from the specification file
 * <tt>file:/C:/Users/Renaud Pawlak/workspace-jsweet/jsweet-def-translators/src/org/jsweet/input/typescriptdef/parser/typescriptdef.lex</tt>
 */
class TypescriptDefScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int EOL_COMMENT = 4;
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int TYPE_MACRO = 3;
  final public static int CHAR = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\61\1\5"+
    "\1\0\1\14\1\0\1\65\1\23\1\11\1\10\1\7\1\20\1\60"+
    "\1\21\1\22\1\6\1\15\11\16\1\52\1\53\1\57\1\12\1\13"+
    "\1\64\1\66\6\17\21\14\1\51\2\14\1\55\1\4\1\56\1\0"+
    "\1\14\1\0\1\32\1\47\1\33\1\36\1\27\1\31\2\14\1\24"+
    "\2\14\1\34\1\40\1\25\1\41\1\43\1\14\1\30\1\35\1\26"+
    "\1\42\1\37\1\50\1\45\1\44\1\14\1\46\1\63\1\54\1\62"+
    "\74\0\1\67\3\0\1\67\57\0\1\67\uff10\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    56,   112,   168,   224,   280,   336,   392,   280,   280, 
      448,   280,   504,   560,   616,   672,   728,   784,   840,   896, 
      952,  1008,   280,  1064,  1120,  1176,  1232,  1288,  1344,  1400, 
     1456,  1512,  1568,  1624,   280,   280,   280,   280,  1680,   280, 
     1736,   280,  1792,   280,  1848,   280,  1904,   280,  1960,  2016, 
      280,  2072,  2128,  2184,  2240,  2296,  2352,  2408,  2464,   280, 
      392,  2520,  2576,  2632,  2688,   280,  2744,   504,  2800,   560, 
     2856,  2912,   280,   280,   280,  2968,   280,  3024,   280,   280, 
     3080,  3136,  3192,  3248,  3304,  3360,  3416,  3472,  3528,  3584, 
     3640,  3696,  3752,  3808,  3864,  3920,  3976,  4032,  1680,   280, 
      280,   280,  4088,   280,  4144,   280,   280,   280,   280,   280, 
      280,   280,   280,  4200,  4256,  4312,  4368,  4424,  4480,  4536, 
     4592,  4648,   280,  4704,  4760,  2968,   280,  4816,  4872,  4928, 
      728,  4984,  5040,  5096,  5152,  5208,  5264,  5320,  5376,  5432, 
     5488,  5544,  5600,  5656,  5712,  5768,  5824,  5880,  5936,  5992, 
     6048,  6104,  6160,  6216,  6272,  6328,  6384,   280,  6440,  6496, 
      280,  6552,  6608,  6664,  6720,  6776,  6832,  6888,  6944,   280, 
     7000,  7056,  7112,  7168,  7224,  7280,  7336,  7392,   280,  7448, 
     7504,  7560,  7616,  7672,   280,  7728,  6328,  7784,  7840,  7896, 
     7952,  8008,  8064,  8120,  8176,  8232,  8288,  8344,  8400,  8456, 
     8512,  8568,   280,  8624,  8680,  8736,  8792,  8848,  8904,  8960, 
      280,  9016,  9072,  9128,  9184,  9240,  9296,   280,  9352,  9408, 
      280,  9464,  9520,  9576,  9632,  9688,  9744,  9800,  9856,   280, 
     9912,  9968, 10024, 10080, 10136,   280, 10192, 10248, 10304, 10360, 
      280, 10416,   280,   280, 10472, 10528, 10584, 10640, 10696, 10752, 
      280, 10808, 10864,   280, 10920,   280, 10976, 11032, 11088, 11144, 
    11200, 11256, 11312, 11368,   280, 11424, 11480, 11536, 11592, 11648, 
    11704, 11760, 11816, 11872, 11928, 11984, 12040, 12096, 12152, 12208, 
    12264, 12320,   280, 12376, 12432, 12488, 12544,   280, 12600, 12656, 
    12712, 12768, 12824, 12880, 12936, 12992, 13048, 13104,   728, 13160, 
      280, 13216, 13272, 13328, 13384, 13440, 13496,   280, 13552, 13608, 
      728, 13664, 13720, 13776,   280, 13832,   280, 13888, 13944, 14000, 
    14056, 14112,   728, 14168, 14224, 14280,   280, 14336, 14392, 14448, 
      728, 14504, 14560,   280, 14616, 14672, 14728, 14784,   728,   280
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\21"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\21\1\34\1\35\1\36\1\21\1\37\1\40\1\41"+
    "\3\21\1\42\2\21\1\43\3\21\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\11\1\61\2\6\1\61\1\62\1\63"+
    "\62\61\1\64\2\6\1\64\1\65\16\64\1\63\44\64"+
    "\1\6\2\66\1\67\22\6\1\70\1\71\6\6\1\72"+
    "\31\6\1\11\1\73\1\74\65\11\72\0\1\10\1\75"+
    "\22\0\1\76\1\77\6\0\1\100\13\0\1\44\10\0"+
    "\1\101\7\0\1\75\22\0\1\76\1\77\6\0\1\100"+
    "\13\0\1\44\10\0\1\101\12\0\1\102\1\103\63\0"+
    "\1\104\6\0\1\105\55\0\10\106\1\107\1\110\56\106"+
    "\12\0\1\111\1\112\66\0\1\113\71\0\4\21\4\0"+
    "\22\21\1\0\3\21\32\0\4\21\4\0\21\21\1\114"+
    "\1\0\2\21\1\114\32\0\1\21\2\23\1\21\4\0"+
    "\22\21\1\0\3\21\33\0\1\115\1\116\1\0\1\117"+
    "\64\0\1\115\1\116\2\0\1\120\70\0\1\121\61\0"+
    "\4\21\4\0\1\21\1\122\7\21\1\123\2\21\1\124"+
    "\5\21\1\0\3\21\32\0\4\21\4\0\3\21\1\125"+
    "\16\21\1\0\3\21\32\0\4\21\4\0\20\21\1\126"+
    "\1\21\1\0\3\21\32\0\4\21\4\0\1\21\1\127"+
    "\17\21\1\130\1\0\3\21\32\0\4\21\4\0\4\21"+
    "\1\131\11\21\1\132\3\21\1\0\3\21\32\0\4\21"+
    "\4\0\11\21\1\133\10\21\1\0\3\21\32\0\4\21"+
    "\4\0\10\21\1\134\4\21\1\135\4\21\1\0\3\21"+
    "\32\0\4\21\4\0\2\21\1\136\17\21\1\0\3\21"+
    "\32\0\4\21\4\0\3\21\1\137\16\21\1\0\3\21"+
    "\32\0\4\21\4\0\6\21\1\140\13\21\1\0\3\21"+
    "\32\0\4\21\4\0\4\21\1\141\11\21\1\142\3\21"+
    "\1\0\3\21\21\0\1\143\52\0\1\144\23\0\1\145"+
    "\67\0\1\146\56\0\1\147\1\150\1\151\57\0\1\152"+
    "\71\0\1\153\2\0\1\61\2\0\1\61\2\0\62\61"+
    "\4\0\1\154\1\155\17\0\1\156\1\157\1\0\1\160"+
    "\37\0\1\64\2\0\1\64\1\0\16\64\1\0\44\64"+
    "\4\0\1\154\16\0\1\161\1\0\1\156\1\157\1\0"+
    "\1\160\40\0\3\66\2\0\1\162\64\0\1\67\130\0"+
    "\1\163\70\0\1\164\51\0\1\165\42\0\1\74\131\0"+
    "\1\166\70\0\1\167\51\0\1\170\41\0\1\147\1\150"+
    "\1\101\64\0\7\171\1\172\60\171\13\0\1\173\57\0"+
    "\1\107\6\0\1\174\55\0\10\110\1\106\1\175\56\110"+
    "\14\0\1\21\3\176\4\0\3\21\1\176\1\21\3\176"+
    "\2\21\1\176\7\21\1\0\1\176\2\21\33\0\2\116"+
    "\73\0\1\177\61\0\4\21\4\0\2\21\1\200\17\21"+
    "\1\0\3\21\21\0\1\201\10\0\4\21\4\0\22\21"+
    "\1\0\3\21\32\0\4\21\4\0\17\21\1\202\2\21"+
    "\1\0\3\21\32\0\4\21\4\0\22\21\1\0\1\21"+
    "\1\203\1\21\32\0\4\21\4\0\17\21\1\204\2\21"+
    "\1\0\3\21\32\0\4\21\4\0\16\21\1\205\3\21"+
    "\1\0\3\21\32\0\4\21\4\0\2\21\1\206\14\21"+
    "\1\207\2\21\1\0\3\21\32\0\4\21\4\0\15\21"+
    "\1\210\4\21\1\0\3\21\32\0\4\21\4\0\1\21"+
    "\1\211\20\21\1\0\3\21\21\0\1\212\10\0\4\21"+
    "\4\0\22\21\1\0\3\21\32\0\4\21\4\0\6\21"+
    "\1\213\13\21\1\0\3\21\32\0\4\21\4\0\1\21"+
    "\1\214\20\21\1\0\3\21\32\0\4\21\4\0\6\21"+
    "\1\215\13\21\1\0\3\21\32\0\4\21\4\0\7\21"+
    "\1\216\12\21\1\0\3\21\32\0\4\21\4\0\4\21"+
    "\1\217\15\21\1\0\3\21\32\0\4\21\4\0\1\220"+
    "\21\21\1\0\3\21\32\0\4\21\4\0\22\21\1\0"+
    "\1\221\2\21\20\0\1\150\66\0\1\147\1\150\1\151"+
    "\72\0\1\222\1\223\123\0\1\224\67\0\1\225\57\0"+
    "\1\226\77\0\1\227\67\0\1\230\57\0\1\231\34\0"+
    "\7\171\1\232\60\171\6\233\1\234\1\235\60\233\13\0"+
    "\1\236\54\0\10\175\1\110\1\237\56\175\14\0\4\21"+
    "\4\0\3\21\1\240\16\21\1\0\3\21\21\0\1\201"+
    "\1\0\2\241\5\0\4\241\3\0\23\241\1\0\3\241"+
    "\32\0\4\21\4\0\10\21\1\242\4\21\1\243\4\21"+
    "\1\0\3\21\32\0\4\21\4\0\3\21\1\244\16\21"+
    "\1\0\3\21\32\0\4\21\4\0\14\21\1\245\5\21"+
    "\1\0\3\21\32\0\4\21\4\0\3\21\1\246\16\21"+
    "\1\0\3\21\32\0\4\21\4\0\15\21\1\247\4\21"+
    "\1\0\3\21\32\0\4\21\4\0\14\21\1\250\5\21"+
    "\1\0\3\21\32\0\4\21\4\0\7\21\1\251\12\21"+
    "\1\0\3\21\21\0\1\212\1\0\2\252\5\0\4\252"+
    "\3\0\23\252\1\0\3\252\32\0\4\21\4\0\11\21"+
    "\1\253\10\21\1\0\3\21\32\0\4\21\4\0\11\21"+
    "\1\254\10\21\1\0\3\21\32\0\4\21\4\0\2\21"+
    "\1\255\17\21\1\0\3\21\32\0\4\21\4\0\10\21"+
    "\1\256\11\21\1\0\3\21\21\0\1\257\10\0\4\21"+
    "\4\0\22\21\1\0\3\21\32\0\4\21\4\0\13\21"+
    "\1\260\6\21\1\0\3\21\32\0\4\21\4\0\10\21"+
    "\1\261\11\21\1\0\3\21\16\0\1\222\2\66\65\222"+
    "\7\223\1\262\60\223\27\0\1\263\101\0\1\264\62\0"+
    "\1\265\62\0\1\266\101\0\1\267\62\0\1\270\33\0"+
    "\6\171\1\271\1\232\60\171\7\233\1\272\60\233\7\273"+
    "\1\274\60\273\6\275\1\271\1\235\60\275\10\237\1\175"+
    "\1\0\56\237\14\0\4\21\4\0\4\21\1\276\15\21"+
    "\1\0\3\21\32\0\4\21\4\0\3\21\1\277\16\21"+
    "\1\0\3\21\32\0\4\21\4\0\4\21\1\300\15\21"+
    "\1\0\3\21\32\0\4\21\4\0\15\21\1\301\4\21"+
    "\1\0\3\21\21\0\1\302\10\0\4\21\4\0\22\21"+
    "\1\0\3\21\32\0\4\21\4\0\1\21\1\303\20\21"+
    "\1\0\3\21\32\0\4\21\4\0\4\21\1\304\15\21"+
    "\1\0\3\21\21\0\1\305\10\0\4\21\4\0\22\21"+
    "\1\0\3\21\32\0\4\21\4\0\2\21\1\306\17\21"+
    "\1\0\3\21\32\0\4\21\4\0\11\21\1\307\10\21"+
    "\1\0\3\21\32\0\4\21\4\0\2\21\1\310\17\21"+
    "\1\0\3\21\32\0\4\21\4\0\1\311\21\21\1\0"+
    "\3\21\32\0\4\21\4\0\6\21\1\312\13\21\1\0"+
    "\3\21\21\0\1\257\1\0\2\313\5\0\4\313\3\0"+
    "\23\313\1\0\3\313\32\0\4\21\4\0\6\21\1\314"+
    "\13\21\1\0\3\21\32\0\4\21\4\0\1\315\21\21"+
    "\1\0\3\21\16\0\6\223\1\66\1\262\60\223\30\0"+
    "\1\316\71\0\1\317\40\0\1\320\114\0\1\321\71\0"+
    "\1\322\35\0\6\275\1\323\1\235\60\275\6\324\1\323"+
    "\1\325\60\324\7\233\1\235\60\233\14\0\4\21\4\0"+
    "\5\21\1\326\14\21\1\0\3\21\32\0\4\21\4\0"+
    "\14\21\1\327\5\21\1\0\3\21\32\0\4\21\4\0"+
    "\2\21\1\330\17\21\1\0\3\21\32\0\4\21\4\0"+
    "\5\21\1\331\14\21\1\0\3\21\21\0\1\302\1\0"+
    "\2\332\5\0\4\332\3\0\23\332\1\0\3\332\32\0"+
    "\4\21\4\0\12\21\1\333\7\21\1\0\3\21\32\0"+
    "\4\21\4\0\2\21\1\334\17\21\1\0\3\21\21\0"+
    "\1\305\1\0\2\335\5\0\4\335\3\0\23\335\1\0"+
    "\3\335\32\0\4\21\4\0\1\336\21\21\1\0\3\21"+
    "\21\0\1\337\10\0\4\21\4\0\22\21\1\0\3\21"+
    "\21\0\1\340\10\0\4\21\4\0\22\21\1\0\3\21"+
    "\32\0\4\21\4\0\7\21\1\341\12\21\1\0\3\21"+
    "\32\0\4\21\4\0\4\21\1\342\15\21\1\0\3\21"+
    "\32\0\4\21\4\0\2\21\1\343\17\21\1\0\3\21"+
    "\32\0\4\21\4\0\7\21\1\344\12\21\1\0\3\21"+
    "\44\0\1\11\71\0\1\345\42\0\1\320\1\0\2\346"+
    "\5\0\4\346\3\0\23\346\1\0\3\346\44\0\1\347"+
    "\71\0\1\350\37\0\7\273\1\325\60\273\6\324\1\0"+
    "\1\325\60\324\14\0\4\21\4\0\6\21\1\351\13\21"+
    "\1\0\3\21\32\0\4\21\4\0\3\21\1\352\16\21"+
    "\1\0\3\21\21\0\1\353\3\0\1\354\4\0\4\21"+
    "\4\0\22\21\1\0\3\21\21\0\1\355\10\0\4\21"+
    "\4\0\22\21\1\0\3\21\32\0\4\21\4\0\11\21"+
    "\1\356\10\21\1\0\3\21\17\0\2\357\1\360\6\0"+
    "\1\361\1\0\4\21\4\0\22\21\1\0\3\21\32\0"+
    "\4\21\4\0\15\21\1\362\4\21\1\0\3\21\21\0"+
    "\1\337\1\0\2\363\5\0\4\363\3\0\23\363\1\0"+
    "\3\363\21\0\1\340\1\0\2\364\5\0\4\364\3\0"+
    "\23\364\1\0\3\364\21\0\1\365\10\0\4\21\4\0"+
    "\22\21\1\0\3\21\32\0\4\21\4\0\3\21\1\366"+
    "\16\21\1\0\3\21\32\0\4\21\4\0\3\21\1\367"+
    "\16\21\1\0\3\21\21\0\1\370\10\0\4\21\4\0"+
    "\22\21\1\0\3\21\45\0\1\11\41\0\3\347\22\0"+
    "\1\76\70\0\1\347\54\0\4\21\4\0\7\21\1\371"+
    "\12\21\1\0\3\21\32\0\4\21\4\0\1\21\1\372"+
    "\20\21\1\0\3\21\21\0\1\353\1\0\3\354\4\0"+
    "\4\354\3\0\23\354\1\0\3\354\21\0\1\355\1\0"+
    "\2\373\5\0\4\373\3\0\23\373\1\0\3\373\21\0"+
    "\1\374\5\0\1\375\2\0\4\21\4\0\22\21\1\376"+
    "\3\21\17\0\3\357\6\0\1\361\56\0\2\357\1\360"+
    "\1\0\2\361\3\0\1\361\1\0\4\361\3\0\23\361"+
    "\1\0\3\361\32\0\4\21\4\0\1\21\1\377\20\21"+
    "\1\0\3\21\21\0\1\365\1\0\2\u0100\5\0\4\u0100"+
    "\3\0\23\u0100\1\0\3\u0100\17\0\3\u0101\10\0\4\21"+
    "\4\0\1\21\1\u0102\1\21\1\u0103\1\21\1\u0104\1\21"+
    "\1\u0105\3\21\1\u0106\1\u0107\5\21\1\0\3\21\21\0"+
    "\1\u0108\10\0\4\21\4\0\22\21\1\0\3\21\21\0"+
    "\1\370\1\0\2\u0109\5\0\4\u0109\3\0\23\u0109\1\0"+
    "\3\u0109\32\0\4\21\4\0\3\21\1\u010a\16\21\1\0"+
    "\3\21\32\0\4\21\4\0\2\21\1\u010b\17\21\1\0"+
    "\3\21\21\0\1\374\1\0\2\376\2\0\1\375\2\0"+
    "\4\376\3\0\27\376\16\0\10\375\1\u010c\1\u010d\56\375"+
    "\3\0\1\u010e\10\0\4\21\4\0\22\21\1\0\3\21"+
    "\17\0\3\u0101\21\0\1\u010f\1\0\1\u0110\1\0\1\u0111"+
    "\1\0\1\u0112\3\0\1\u0113\1\u0114\43\0\4\21\4\0"+
    "\6\21\1\u0115\13\21\1\0\3\21\32\0\4\21\4\0"+
    "\1\21\1\u0116\20\21\1\0\3\21\32\0\4\21\4\0"+
    "\16\21\1\u0117\3\21\1\0\3\21\32\0\4\21\4\0"+
    "\10\21\1\u0118\11\21\1\0\3\21\32\0\4\21\4\0"+
    "\6\21\1\u0119\13\21\1\0\3\21\32\0\4\21\4\0"+
    "\15\21\1\u011a\4\21\1\0\3\21\21\0\1\u0108\1\0"+
    "\2\u011b\5\0\4\u011b\3\0\23\u011b\1\0\3\u011b\21\0"+
    "\1\u011c\10\0\4\21\4\0\22\21\1\0\3\21\32\0"+
    "\4\21\4\0\11\21\1\u011d\10\21\1\0\3\21\21\0"+
    "\1\u010c\6\0\1\u011e\55\0\10\u010d\1\375\1\u011f\56\u010d"+
    "\3\0\1\u010e\1\0\2\u0120\5\0\4\u0120\3\0\23\u0120"+
    "\1\0\3\u0120\50\0\1\u0121\62\0\1\u0122\104\0\1\u0123"+
    "\61\0\1\u0124\65\0\1\u0125\76\0\1\u0126\42\0\4\21"+
    "\4\0\14\21\1\u0127\5\21\1\0\3\21\32\0\4\21"+
    "\4\0\16\21\1\u0128\3\21\1\0\3\21\32\0\4\21"+
    "\4\0\1\21\1\u0129\20\21\1\0\3\21\32\0\4\21"+
    "\4\0\6\21\1\u012a\13\21\1\0\3\21\32\0\4\21"+
    "\4\0\4\21\1\u012b\15\21\1\0\3\21\32\0\4\21"+
    "\4\0\12\21\1\u012c\7\21\1\0\3\21\21\0\1\u011c"+
    "\1\0\2\u012d\5\0\4\u012d\3\0\23\u012d\1\0\3\u012d"+
    "\21\0\1\u012e\10\0\4\21\4\0\22\21\1\0\3\21"+
    "\31\0\1\376\54\0\10\u011f\1\u010d\1\u012f\56\u011f\40\0"+
    "\1\u0130\71\0\1\u0131\52\0\1\u0132\74\0\1\u0133\65\0"+
    "\1\u0134\75\0\1\u0135\45\0\4\21\4\0\3\21\1\u0136"+
    "\16\21\1\0\3\21\32\0\4\21\4\0\14\21\1\u0137"+
    "\5\21\1\0\3\21\32\0\4\21\4\0\7\21\1\u0138"+
    "\12\21\1\0\3\21\32\0\4\21\4\0\11\21\1\u0139"+
    "\10\21\1\0\3\21\32\0\4\21\4\0\16\21\1\u013a"+
    "\3\21\1\0\3\21\21\0\1\u012e\1\0\2\u013b\5\0"+
    "\4\u013b\3\0\23\u013b\1\0\3\u013b\16\0\10\u012f\1\u011f"+
    "\1\0\56\u012f\27\0\1\u013c\100\0\1\u013d\62\0\1\u013e"+
    "\71\0\1\u013f\74\0\1\u0140\41\0\4\21\4\0\11\21"+
    "\1\u0141\10\21\1\0\3\21\32\0\4\21\4\0\2\21"+
    "\1\u0142\17\21\1\0\3\21\32\0\4\21\4\0\11\21"+
    "\1\u0143\10\21\1\0\3\21\32\0\4\21\4\0\10\21"+
    "\1\u0144\11\21\1\0\3\21\53\0\1\u0145\60\0\1\u0146"+
    "\76\0\1\u0147\66\0\1\u0148\47\0\4\21\4\0\17\21"+
    "\1\u0149\2\21\1\0\3\21\32\0\4\21\4\0\1\u014a"+
    "\21\21\1\0\3\21\32\0\4\21\4\0\3\21\1\u014b"+
    "\16\21\1\0\3\21\61\0\1\u014c\50\0\1\u014d\72\0"+
    "\1\u014e\54\0\4\21\4\0\6\21\1\u014f\13\21\1\0"+
    "\3\21\32\0\4\21\4\0\15\21\1\u0150\4\21\1\0"+
    "\3\21\50\0\1\u0151\76\0\1\u0152\42\0\4\21\4\0"+
    "\7\21\1\u0144\12\21\1\0\3\21\32\0\4\21\4\0"+
    "\1\21\1\u0153\20\21\1\0\3\21\51\0\1\u0148\61\0"+
    "\1\u0154\42\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  1,  0,  9,  1,  1,  9,  9,  1,  9,  3,  3,  1,  1, 
     1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  9,  1,  9,  1,  9,  1,  9,  1,  9,  1,  9, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  0,  0, 
     1,  9,  0,  0,  0,  0,  0,  0,  9,  9,  9,  1,  9,  1,  9,  9, 
     1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  1,  1,  1, 
     1,  1,  0,  9,  9,  9,  1,  9,  0,  9,  9,  9,  9,  9,  9,  9, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 13,  0,  0,  1,  9,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  3,  1, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0, 13,  0,  1, 
    13,  1,  1,  1,  3,  1,  1,  3,  1, 13,  1,  1,  1,  1,  0,  1, 
     1,  0,  9,  0,  0,  2,  0,  0,  9,  0,  0,  0,  0,  1,  1,  1, 
     1,  0,  1,  1,  0,  1,  3,  3,  1,  1, 13,  1,  1,  0,  0,  0, 
     0,  0,  9,  0,  0,  1,  1,  3,  3, 13,  1,  3, 13,  1,  0,  0, 
     3,  1,  1,  3,  0, 13,  0,  0,  1,  1,  0, 13,  0,  3,  0,  0, 
    13,  1, 13, 13,  0,  1,  3,  0,  1,  1, 13,  0,  0, 13,  3, 13, 
     0,  1,  1,  1,  1,  1,  1,  0, 13,  3,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  1, 13,  0,  3,  0,  0, 13, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1, 13,  0,  0,  0, 
     0,  0,  0,  9,  0,  1,  1,  1,  1,  1, 13,  0,  9,  0,  0,  0, 
     1,  1,  1,  1,  0,  0,  9,  0,  1,  1,  1,  0,  0,  9,  1,  1, 
     0,  0,  1,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	StringBuffer string=new StringBuffer();
	String fileName;
	public void setFileName(String name) {
		fileName=name;
	}
	public String getFileName() {
		return fileName;
	}
	private Symbol symbol(int type) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,yytext(),
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Symbol symbol(int type, String value) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,value,
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Stack<Symbol> openParens = new Stack<Symbol>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypescriptDefScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TypescriptDefScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[14840];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;
    int yy_pushbackPos_l = yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            yy_pushbackPos = yy_pushbackPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            yy_pushbackPos_l = yy_pushbackPos;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 2) == 2 )
            yy_pushbackPos_l = yy_currentPos_l;

          if ( (yy_attributes & 1) == 1 ) {
            yy_was_pushback = (yy_attributes & 4) == 4;
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;
      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos_l;

      switch (yy_action) {

        case 314: 
          {  return symbol(sym.IMPLEMENTS);  }
        case 341: break;
        case 298: 
        case 307: 
          {  return symbol(sym.DECLARE_VAR);  }
        case 342: break;
        case 0: 
        case 16: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 75: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 127: 
        case 129: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 159: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 175: 
        case 176: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 194: 
        case 195: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 203: 
        case 204: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 218: 
        case 219: 
        case 221: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 232: 
        case 233: 
        case 237: 
        case 241: 
        case 245: 
        case 246: 
        case 248: 
        case 249: 
        case 254: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 265: 
        case 266: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 284: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 299: 
        case 309: 
        case 311: 
        case 312: 
        case 313: 
        case 320: 
        case 321: 
        case 323: 
        case 328: 
        case 329: 
        case 334: 
        case 335: 
          {  return symbol(sym.IDENTIFIER);  }
        case 343: break;
        case 58: 
        case 59: 
          {  yybegin(YYINITIAL); yypushback(yylength());  }
        case 344: break;
        case 79: 
          {  return symbol(sym.MINUSMINUS);  }
        case 345: break;
        case 122: 
          {  return symbol(sym.RPAREN_FUNC);  }
        case 346: break;
        case 157: 
          {  return symbol(sym.LPAREN_FUNC);  }
        case 347: break;
        case 300: 
          {  return symbol(sym.INTERFACE);  }
        case 348: break;
        case 287: 
          {  return symbol(sym.FUNCTION);  }
        case 349: break;
        case 45: 
          {  return symbol(sym.QUESTION);  }
        case 350: break;
        case 78: 
          {  return symbol(sym.PLUSPLUS);  }
        case 351: break;
        case 101: 
          {  return symbol(sym.NOTEQUALS);  }
        case 352: break;
        case 126: 
          {  return symbol(sym.DOTDOTDOT);  }
        case 353: break;
        case 47: 
          {  return symbol(sym.AT);  }
        case 354: break;
        case 46: 
          {  return symbol(sym.AND);  }
        case 355: break;
        case 42: 
          {  return symbol(sym.NOT);  }
        case 356: break;
        case 40: 
          {  return symbol(sym.LT);  }
        case 357: break;
        case 35: 
          {  return symbol(sym.COL);  }
        case 358: break;
        case 10: 
          {  return symbol(sym.DIV);  }
        case 359: break;
        case 8: 
          {  /* ignore */  }
        case 360: break;
        case 3: 
        case 54: 
          {  /* ignore */  }
        case 361: break;
        case 15: 
          {  return symbol(sym.GT);  }
        case 362: break;
        case 17: 
        case 18: 
        case 76: 
        case 77: 
          {  return symbol(sym.INT);  }
        case 363: break;
        case 21: 
          {  return symbol(sym.DOT);  }
        case 364: break;
        case 53: 
          {  return symbol(sym.LF);  }
        case 365: break;
        case 74: 
          {  return symbol(sym.GTE);  }
        case 366: break;
        case 100: 
          {  return symbol(sym.LTE);  }
        case 367: break;
        case 125: 
          {  return symbol(sym.INT);  }
        case 368: break;
        case 130: 
          {  return symbol(sym.NEW);  }
        case 369: break;
        case 160: 
          {  return symbol(sym.IS);  }
        case 370: break;
        case 169: 
          {  return symbol(sym.AS);  }
        case 371: break;
        case 202: 
          {  return symbol(sym.VAR);  }
        case 372: break;
        case 210: 
          {  return symbol(sym.DOC);  }
        case 373: break;
        case 5: 
        case 55: 
        case 56: 
        case 57: 
          {  System.out.println("unmatched:"+yytext());  }
        case 374: break;
        case 178: 
          {  yybegin(YYINITIAL); return symbol(sym.TYPE_MACRO);  }
        case 375: break;
        case 322: 
        case 326: 
          {  return symbol(sym.DECLARE_CLASS);  }
        case 376: break;
        case 310: 
        case 316: 
          {  return symbol(sym.DECLARE_ENUM);  }
        case 377: break;
        case 243: 
          {  return symbol(sym.CONST);  }
        case 378: break;
        case 242: 
          {  return symbol(sym.CLASS);  }
        case 379: break;
        case 44: 
          {  return symbol(sym.TUBE);  }
        case 380: break;
        case 41: 
          {  return symbol(sym.COMMA);  }
        case 381: break;
        case 36: 
          {  return symbol(sym.SEMI);  }
        case 382: break;
        case 11: 
          {  return symbol(sym.MULT);  }
        case 383: break;
        case 19: 
          {  return symbol(sym.PLUS);  }
        case 384: break;
        case 20: 
          {  return symbol(sym.MINUS);  }
        case 385: break;
        case 64: 
          {  return symbol(sym.TUBE);  }
        case 386: break;
        case 102: 
        case 103: 
          {  return symbol(sym.TUBE);  }
        case 387: break;
        case 105: 
          {  return symbol(sym.OROR);  }
        case 388: break;
        case 217: 
          {  return symbol(sym.ENUM);  }
        case 389: break;
        case 220: 
          {  return symbol(sym.FROM);  }
        case 390: break;
        case 49: 
          {  string.append('\\');  }
        case 391: break;
        case 52: 
          {  string.append('\\');  }
        case 392: break;
        case 107: 
          {  string.append('\\');  }
        case 393: break;
        case 108: 
          {  string.append('\"');  }
        case 394: break;
        case 109: 
          {  string.append('\n');  }
        case 395: break;
        case 110: 
          {  string.append('\t');  }
        case 396: break;
        case 111: 
          {  string.append('\r');  }
        case 397: break;
        case 112: 
          {  string.append('\'');  }
        case 398: break;
        case 65: 
          {  yybegin(EOL_COMMENT);  }
        case 399: break;
        case 338: 
        case 339: 
          {  return symbol(sym.DECLARE_FUNCTION);  }
        case 400: break;
        case 50: 
          {  yybegin(YYINITIAL); 
                          return symbol(sym.IDENTIFIER, 
                          "\""+string.toString()+"\"");  }
        case 401: break;
        case 229: 
          {  yypushback(yylength()); yybegin(TYPE_MACRO);  }
        case 402: break;
        case 6: 
        case 7: 
          {  /*System.err.println("LF");*/  return symbol(sym.LF);  }
        case 403: break;
        case 155: 
        case 184: 
          {  /*System.err.println("COMMENT: "+yytext());*/ /* ignore */  }
        case 404: break;
        case 22: 
          {  string.setLength(0); yybegin(CHAR);  }
        case 405: break;
        case 330: 
        case 333: 
          {  return symbol(sym.DECLARE_MODULE);  }
        case 406: break;
        case 9: 
          {  string.setLength(0); yybegin(STRING);  }
        case 407: break;
        case 282: 
          {  return symbol(sym.PRIVATE);  }
        case 408: break;
        case 264: 
          {  return symbol(sym.PUBLIC);  }
        case 409: break;
        case 255: 
          {  return symbol(sym.STATIC);  }
        case 410: break;
        case 253: 
          {  return symbol(sym.EXTENDS);  }
        case 411: break;
        case 250: 
          {  return symbol(sym.TYPEOF);  }
        case 412: break;
        case 240: 
          {  return symbol(sym.EXPORT);  }
        case 413: break;
        case 235: 
          {  return symbol(sym.IMPORT);  }
        case 414: break;
        case 51: 
          {  string.append( yytext() );  }
        case 415: break;
        case 48: 
          {  string.append( yytext() );  }
        case 416: break;
        case 43: 
          {  return symbol(sym.MATCHES);  }
        case 417: break;
        case 39: 
          {  return symbol(sym.RSPAREN);  }
        case 418: break;
        case 38: 
          {  return symbol(sym.LSPAREN);  }
        case 419: break;
        case 37: 
          {  return symbol(sym.RCPAREN);  }
        case 420: break;
        case 34: 
          {  return symbol(sym.LCPAREN);  }
        case 421: break;
        case 12: 
          {  return symbol(sym.RPAREN);  }
        case 422: break;
        case 13: 
          {  return symbol(sym.LPAREN);  }
        case 423: break;
        case 14: 
          {  return symbol(sym.ASSIGN);  }
        case 424: break;
        case 72: 
          {  return symbol(sym.EQUALS);  }
        case 425: break;
        case 73: 
          {  return symbol(sym.IMPLIES);  }
        case 426: break;
        case 80: 
          {  return symbol(sym.DOTDOT);  }
        case 427: break;
        case 99: 
          {  return symbol(sym.SQUARE);  }
        case 428: break;
        case 106: 
          {  return symbol(sym.ANDAND);  }
        case 429: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            switch (yy_lexical_state) {
            case EOL_COMMENT:
              {  yybegin(YYINITIAL);  }
            case 341: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
